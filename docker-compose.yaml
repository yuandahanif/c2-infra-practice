services:
  treafik-reverse-proxy:
    # The official v3 Traefik docker image
    image: traefik:v3.4
    # Enables the web UI and tells Traefik to listen to docker
    command: --providers.docker --api=true
    networks:
      - cf-network
      - nginx
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - "./letsencrypt:/letsencrypt"
      - "./logs:/logs"
      - "./configs:/configs"
    labels:
      - "traefik.http.routers.dashboard.rule=Host(`tf-dashboard.ninomae.my.id`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=yuand:$2y$10$tQ8Lohi5lAbiT83awa3Iwe9QXSAQxneS75a13/HQh1T0pQ4IykkTW"

      - "traefik.log.filePath=/logs/traefik.log" # Log file path

      - "traefik.entrypoints.web.address=:80" # HTTP c2 entry point
      - "traefik.entrypoints.websecure.address=:443" # HTTPS c2 entry point
      - "traefik.entrypoints.web-decoy.address=:8080" # HTTP decoy entry point
      - "traefik.entrypoints.websecure-decoy.address=:4433" # HTTPS decoy entry point

      - "treafik.certificatesresolvers.default-resolver.acme.httpchallenge.entrypoint=web" # Enable TLS challenge for certificate resolution
      - "treafik.certificatesresolvers.default-resolver.acme.email=20523134@students.uiia.c.id" # Email for Let's Encrypt registration
      - "treafik.certificatesresolvers.default-resolver.acme.storage=/letsencrypt/acme.json" # Storage for Let's Encrypt certificates

      - "traefik.http.routers.router-http.entrypoints=web" # HTTP router entry point
      - "traefik.http.routers.router-http.rule=Host(`api.ninomae.my.id`)" # Rule for HTTP router
      - "traefik.http.routers.router-http.endpoint=http://127.0.1:80" # Endpoint for HTTP router

      - "traefik.http.routers.router-https.entrypoints=websecure" # HTTPS router entry point
      - "traefik.http.routers.router-https.rule=Host(`api.ninomae.my.id`)" # Rule for HTTPS router
      - "traefik.http.routers.router-https.endpoint=http://127.0.1:443" # Endpoint for HTTPS router
      - "traefik.http.routers.router-https.tls.certresolver=default-resolver" # Use default resolver for HTTPS router

  nginx:
    container_name: nginx
    image: nginx
    restart: unless-stopped
    networks:
      - nginx
    volumes:
      - "./nginx/var/www/html:/usr/share/nginx/html" # Mount the decoy website files to the Nginx container
      - "./nginx/default.conf:/etc/nginx/conf.d/default.conf"
    labels:
      - "traefik.enable=true" # Enable Traefik for this service
      - "traefik.http.routers.nginx.rule=Host(`ninomae.my.id`) || Host(`www.ninomae.my.id`)" # Rule for Nginx decoy website
      - "traefik.http.routers.nginx.entrypoints=web-decoy,websecure-decoy" # Entry points for Nginx decoy website
      - "traefik.http.services.nginx-service.loadbalancer.server.port=80" # Port for Nginx service
      - "traefik.http.services.nginx-service.loadbalancer.server.url=http://nginx:80" # URL for Nginx service
      - "traefik.http.routers.nginx.tls=true" # Enable TLS for Nginx decoy website
      - "traefik.http.routers.nginx.tls.certresolver=default-resolver" # Use default resolver for TLS
      - "traefik.http.routers.nginx.loadBalancer.passHostHeader=true" # Pass the host header to the Nginx service

  # Cloudflare Tunnel Service
  cloudflare-tunnel:
    image: cloudflare/cloudflared:latest # Pull the latest version of the Cloudflare Tunnel image
    container_name: cloudflare-tunnel # Name of the Cloudflare Tunnel container
    hostname: cloudflare-tunnel # Hostname for the Cloudflare Tunnel container
    restart: unless-stopped # Restart the container unless manually stopped

    # Network mode configuration
    networks:
      - cf-network

    # Command to run Cloudflare Tunnel
    command: tunnel run # Command to start the Cloudflare tunnel

    # Volume configuration for time synchronization and hosts file persistence
    volumes:
      - /etc/localtime:/etc/localtime:ro # Synchronize time with the host

    # Environment variables for Cloudflare Tunnel
    environment:
      - "TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}" # Pass the Cloudflare Tunnel token from environment variable

    labels:
      - "traefik.enable=false" # Disable Traefik for this service
    
networks:
  cf-network:
  nginx:
